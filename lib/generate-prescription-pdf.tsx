import jsPDF from "jspdf"

interface DoctorInfo {
  name: string
  clinicAddress: string
  phone: string
  license: string
}

interface PatientInfo {
  name: string
  age: string
  gender: string
  phone: string
  address: string
}

interface Symptom {
  text: string
  severity: "mild" | "moderate" | "severe"
  notes?: string
}

interface Diagnosis {
  text: string
  icd10: string | null
  confidence: number
}

interface Medication {
  name: string
  dose: string
  timing: string
  duration_days: number
  instructions: string
}

interface PrescriptionData {
  symptoms: Symptom[]
  diagnoses: Diagnosis[]
  medications: Medication[]
}

export function generatePrescriptionPDF(
  prescription: PrescriptionData,
  doctorInfo: DoctorInfo,
  patientInfo: PatientInfo,
): jsPDF {
  const doc = new jsPDF()

  // Set up fonts and colors
  const primaryColor = "#1f2937" // gray-800
  const accentColor = "#8b5cf6" // purple-500
  const lightGray = "#6b7280" // gray-500

  let yPosition = 20
  const pageWidth = doc.internal.pageSize.width
  const margin = 20
  const contentWidth = pageWidth - margin * 2

  // Helper function to add text with word wrapping
  const addWrappedText = (text: string, x: number, y: number, maxWidth: number, fontSize = 10) => {
    doc.setFontSize(fontSize)
    const lines = doc.splitTextToSize(text, maxWidth)
    doc.text(lines, x, y)
    return y + lines.length * (fontSize * 0.4)
  }

  // Header - Clinic Information
  doc.setFillColor(139, 92, 246) // accent color
  doc.rect(0, 0, pageWidth, 40, "F")

  doc.setTextColor(255, 255, 255)
  doc.setFontSize(24)
  doc.setFont("helvetica", "bold")
  doc.text("MEDICAL PRESCRIPTION", pageWidth / 2, 20, { align: "center" })

  doc.setFontSize(12)
  doc.setFont("helvetica", "normal")
  doc.text("Generated by AI-Assisted Medical System", pageWidth / 2, 30, { align: "center" })

  yPosition = 50

  // Doctor Information Section
  doc.setTextColor(31, 41, 55) // primary color
  doc.setFontSize(16)
  doc.setFont("helvetica", "bold")
  doc.text("DOCTOR INFORMATION", margin, yPosition)
  yPosition += 10

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(107, 114, 128) // light gray

  if (doctorInfo.name) {
    doc.text(`Doctor: ${doctorInfo.name}`, margin, yPosition)
    yPosition += 6
  }

  if (doctorInfo.license) {
    doc.text(`License: ${doctorInfo.license}`, margin, yPosition)
    yPosition += 6
  }

  if (doctorInfo.clinicAddress) {
    yPosition = addWrappedText(`Clinic: ${doctorInfo.clinicAddress}`, margin, yPosition, contentWidth / 2)
    yPosition += 2
  }

  if (doctorInfo.phone) {
    doc.text(`Phone: ${doctorInfo.phone}`, margin, yPosition)
    yPosition += 6
  }

  yPosition += 10

  // Patient Information Section
  doc.setTextColor(31, 41, 55)
  doc.setFontSize(16)
  doc.setFont("helvetica", "bold")
  doc.text("PATIENT INFORMATION", margin, yPosition)
  yPosition += 10

  doc.setFontSize(10)
  doc.setFont("helvetica", "normal")
  doc.setTextColor(107, 114, 128)

  if (patientInfo.name) {
    doc.text(`Patient: ${patientInfo.name}`, margin, yPosition)
    yPosition += 6
  }

  const patientDetails = []
  if (patientInfo.age) patientDetails.push(`Age: ${patientInfo.age}`)
  if (patientInfo.gender) patientDetails.push(`Gender: ${patientInfo.gender}`)

  if (patientDetails.length > 0) {
    doc.text(patientDetails.join(" â€¢ "), margin, yPosition)
    yPosition += 6
  }

  if (patientInfo.phone) {
    doc.text(`Phone: ${patientInfo.phone}`, margin, yPosition)
    yPosition += 6
  }

  if (patientInfo.address) {
    yPosition = addWrappedText(`Address: ${patientInfo.address}`, margin, yPosition, contentWidth)
    yPosition += 2
  }

  yPosition += 15

  // Symptoms Section
  if (prescription.symptoms.length > 0) {
    doc.setTextColor(31, 41, 55)
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text("SYMPTOMS", margin, yPosition)
    yPosition += 8

    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    doc.setTextColor(107, 114, 128)

    prescription.symptoms.forEach((symptom, index) => {
      const severityText = `[${symptom.severity.toUpperCase()}]`
      doc.text(`${index + 1}. ${severityText} ${symptom.text}`, margin + 5, yPosition)
      yPosition += 6

      if (symptom.notes) {
        yPosition = addWrappedText(`   Notes: ${symptom.notes}`, margin + 5, yPosition, contentWidth - 10, 9)
        yPosition += 2
      }
    })

    yPosition += 10
  }

  // Diagnoses Section
  if (prescription.diagnoses.length > 0) {
    doc.setTextColor(31, 41, 55)
    doc.setFontSize(14)
    doc.setFont("helvetica", "bold")
    doc.text("DIAGNOSES", margin, yPosition)
    yPosition += 8

    doc.setFontSize(10)
    doc.setFont("helvetica", "normal")
    doc.setTextColor(107, 114, 128)

    prescription.diagnoses.forEach((diagnosis, index) => {
      const confidenceText = `(${Math.round(diagnosis.confidence * 100)}% confidence)`
      doc.text(`${index + 1}. ${diagnosis.text} ${confidenceText}`, margin + 5, yPosition)
      yPosition += 6

      if (diagnosis.icd10) {
        doc.text(`   ICD-10: ${diagnosis.icd10}`, margin + 5, yPosition)
        yPosition += 6
      }
    })

    yPosition += 10
  }

  // Check if we need a new page
  if (yPosition > 200) {
    doc.addPage()
    yPosition = 20
  }

  // Medications Section (Most Important)
  if (prescription.medications.length > 0) {
    doc.setTextColor(31, 41, 55)
    doc.setFontSize(16)
    doc.setFont("helvetica", "bold")
    doc.text("PRESCRIBED MEDICATIONS", margin, yPosition)
    yPosition += 12

    prescription.medications.forEach((medication, index) => {
      // Check if we need a new page for this medication
      if (yPosition > 240) {
        doc.addPage()
        yPosition = 20
      }

      // Medication name and duration
      doc.setFontSize(14)
      doc.setFont("helvetica", "bold")
      doc.setTextColor(31, 41, 55)
      doc.text(`${index + 1}. ${medication.name}`, margin + 5, yPosition)

      doc.setFontSize(10)
      doc.setFont("helvetica", "normal")
      doc.setTextColor(139, 92, 246) // accent color
      doc.text(
        `(${medication.duration_days} days)`,
        margin + 5 + doc.getTextWidth(`${index + 1}. ${medication.name} `),
        yPosition,
      )
      yPosition += 10

      // Dosage and timing
      doc.setTextColor(107, 114, 128)
      doc.text(`Dosage: ${medication.dose}`, margin + 10, yPosition)
      yPosition += 6

      doc.text(`Timing: ${medication.timing}`, margin + 10, yPosition)
      yPosition += 6

      // Instructions
      doc.text("Instructions:", margin + 10, yPosition)
      yPosition += 4
      yPosition = addWrappedText(medication.instructions, margin + 15, yPosition, contentWidth - 15, 9)
      yPosition += 8

      // Add separator line
      doc.setDrawColor(229, 231, 235)
      doc.line(margin + 5, yPosition, pageWidth - margin, yPosition)
      yPosition += 8
    })
  }

  // Footer
  yPosition = doc.internal.pageSize.height - 30
  doc.setFontSize(8)
  doc.setTextColor(107, 114, 128)
  doc.text(
    "This prescription was generated using AI assistance. Please review all details carefully.",
    margin,
    yPosition,
  )
  yPosition += 4
  doc.text(`Generated on: ${new Date().toLocaleString()}`, margin, yPosition)

  // Add page numbers if multiple pages
  const pageCount = doc.getNumberOfPages()
  if (pageCount > 1) {
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i)
      doc.setFontSize(8)
      doc.setTextColor(107, 114, 128)
      doc.text(`Page ${i} of ${pageCount}`, pageWidth - margin, doc.internal.pageSize.height - 10, { align: "right" })
    }
  }

  return doc
}

export function downloadPrescriptionPDF(
  prescription: PrescriptionData,
  doctorInfo: DoctorInfo,
  patientInfo: PatientInfo,
) {
  const doc = generatePrescriptionPDF(prescription, doctorInfo, patientInfo)

  // Generate filename
  const patientName = patientInfo.name || "Patient"
  const date = new Date().toISOString().split("T")[0]
  const filename = `Prescription_${patientName.replace(/\s+/g, "_")}_${date}.pdf`

  doc.save(filename)
}
